{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "aada0aff-0ce4-4b21-8184-83033148ec90",
   "metadata": {},
   "outputs": [],
   "source": [
    "#import library\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ab065874-3960-4d7f-871b-2ff15693f619",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting openpyxl\n",
      "  Downloading openpyxl-3.1.5-py2.py3-none-any.whl.metadata (2.5 kB)\n",
      "Collecting et-xmlfile (from openpyxl)\n",
      "  Downloading et_xmlfile-1.1.0-py3-none-any.whl.metadata (1.8 kB)\n",
      "Downloading openpyxl-3.1.5-py2.py3-none-any.whl (250 kB)\n",
      "   ---------------------------------------- 0.0/250.9 kB ? eta -:--:--\n",
      "   ---------------------------------------- 0.0/250.9 kB ? eta -:--:--\n",
      "   - -------------------------------------- 10.2/250.9 kB ? eta -:--:--\n",
      "   - -------------------------------------- 10.2/250.9 kB ? eta -:--:--\n",
      "   ---- ---------------------------------- 30.7/250.9 kB 262.6 kB/s eta 0:00:01\n",
      "   --------- ----------------------------- 61.4/250.9 kB 409.6 kB/s eta 0:00:01\n",
      "   ----------------------------------- ---- 225.3/250.9 kB 1.1 MB/s eta 0:00:01\n",
      "   ---------------------------------------- 250.9/250.9 kB 1.1 MB/s eta 0:00:00\n",
      "Downloading et_xmlfile-1.1.0-py3-none-any.whl (4.7 kB)\n",
      "Installing collected packages: et-xmlfile, openpyxl\n",
      "Successfully installed et-xmlfile-1.1.0 openpyxl-3.1.5\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 24.0 -> 24.2\n",
      "[notice] To update, run: C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "!pip install openpyxl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dae5710c-cc44-4e3e-9302-fbff8a62709e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   NO    NAMA   USIA  PARITAS JARAK KELAHIRAN RIW HIPERTENSI RIW PE OBESITAS  \\\n",
      "0   1  NAMA 1  23 TH        3       < 2 tahun          Tidak  Tidak    Tidak   \n",
      "1   2  NAMA 2  29 TH        2       < 2 tahun          Tidak    PEB    Tidak   \n",
      "2   3  NAMA 3  20 TH        1    anak pertama          Tidak  Tidak    Tidak   \n",
      "3   4  NAMA 4  18 TH        1    anak pertama          Tidak  Tidak    Tidak   \n",
      "4   5  NAMA 5  34 TH        3      > 2 tahun           Tidak  Tidak    Tidak   \n",
      "\n",
      "  RIW DM RIW HIPERTENSI/PE DALAM KELUARGA SOSEK RENDAH PE/Non PE Unnamed: 12  \n",
      "0     Ya                            Tidak         >UMR    Non PE         NaN  \n",
      "1  Tidak                              Ada         >UMR        PE         NaN  \n",
      "2  Tidak                            Tidak         >UMR    Non PE         NaN  \n",
      "3  Tidak                            Tidak         >UMR    Non PE         NaN  \n",
      "4  Tidak                            Tidak         >UMR    Non PE         NaN  \n"
     ]
    }
   ],
   "source": [
    "#load data\n",
    "file_path = 'dataKasus-1.xlsx'\n",
    "data = pd.read_excel(file_path)\n",
    "\n",
    "print(data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ff5b9c83-5c6e-4e15-b8ff-38f6ce12f1ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "#drop kolom yang tidak relevan atau data yang hilang\n",
    "data = data.drop(columns=['Unnamed: 12'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d96e4359-855b-4c18-95da-4c39bdae45b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    23\n",
      "1    29\n",
      "2    20\n",
      "3    18\n",
      "4    34\n",
      "Name: USIA, dtype: int32\n"
     ]
    }
   ],
   "source": [
    "#hapus kolom 'USIA' dan ubah ke bentuk numeric\n",
    "data['USIA'] = data['USIA'].astype(str)\n",
    "data['USIA'] = data['USIA'].str.replace(' TH', '', regex=False)\n",
    "data['USIA'] = pd.to_numeric(data['USIA'], errors='coerce').fillna(0).astype(int)\n",
    "print(data['USIA'].head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f41c8496-0163-496e-bedd-88a7ebbdffbf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "               NO        USIA     PARITAS\n",
      "count  561.000000  561.000000  561.000000\n",
      "mean   281.859180   17.565062    1.709447\n",
      "std    162.301009   14.336011    1.012105\n",
      "min      1.000000    0.000000    0.000000\n",
      "25%    142.000000    0.000000    1.000000\n",
      "50%    282.000000   23.000000    2.000000\n",
      "75%    422.000000   29.000000    2.000000\n",
      "max    562.000000   43.000000    6.000000\n"
     ]
    }
   ],
   "source": [
    "print(data.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "be1bed4a-2589-4f75-a26f-d0d68579b1b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#ubah 'JARAK KELAHIRAN' ke bentuk numerical (< 2 tahun = 0, > 2 tahun = 1, 'anak pertama' = 2)\n",
    "data['JARAK KELAHIRAN'] = data['JARAK KELAHIRAN'].map({'< 2 tahun': 0, '> 2 tahun': 1, 'anak pertama': 2})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f7653678-be40-4cf2-9043-7a767f7e01c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Encoding categorical columns (Yes/No columns into 1/0)\n",
    "label_columns = ['RIW HIPERTENSI', 'RIW PE', 'OBESITAS', 'RIW DM', 'RIW HIPERTENSI/PE DALAM KELUARGA', 'SOSEK RENDAH', 'PE/Non PE']\n",
    "le = LabelEncoder()\n",
    "for col in label_columns:\n",
    "    data[col] = le.fit_transform(data[col])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abb3dd53-38b7-4c4b-85ab-be56ed2bd28a",
   "metadata": {},
   "source": [
    "## Percobaan Pemodelan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8ada8d6a-71f6-4c58-831f-c08eabc0c448",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Descriptive Statistics:\n",
      "               NO        USIA     PARITAS  JARAK KELAHIRAN  RIW HIPERTENSI  \\\n",
      "count  561.000000  561.000000  561.000000       343.000000      561.000000   \n",
      "mean   281.859180   17.565062    1.709447         1.521866        0.094474   \n",
      "std    162.301009   14.336011    1.012105         0.850844        0.292748   \n",
      "min      1.000000    0.000000    0.000000         0.000000        0.000000   \n",
      "25%    142.000000    0.000000    1.000000         2.000000        0.000000   \n",
      "50%    282.000000   23.000000    2.000000         2.000000        0.000000   \n",
      "75%    422.000000   29.000000    2.000000         2.000000        0.000000   \n",
      "max    562.000000   43.000000    6.000000         2.000000        1.000000   \n",
      "\n",
      "           RIW PE    OBESITAS      RIW DM  RIW HIPERTENSI/PE DALAM KELUARGA  \\\n",
      "count  561.000000  561.000000  561.000000                        561.000000   \n",
      "mean     8.795009    0.008913    0.008913                          0.980392   \n",
      "std      0.974154    0.094069    0.094069                          0.138772   \n",
      "min      0.000000    0.000000    0.000000                          0.000000   \n",
      "25%      9.000000    0.000000    0.000000                          1.000000   \n",
      "50%      9.000000    0.000000    0.000000                          1.000000   \n",
      "75%      9.000000    0.000000    0.000000                          1.000000   \n",
      "max     10.000000    1.000000    1.000000                          1.000000   \n",
      "\n",
      "       SOSEK RENDAH   PE/Non PE  \n",
      "count    561.000000  561.000000  \n",
      "mean       0.992870    1.188948  \n",
      "std        0.084214    0.797285  \n",
      "min        0.000000    0.000000  \n",
      "25%        1.000000    1.000000  \n",
      "50%        1.000000    1.000000  \n",
      "75%        1.000000    1.000000  \n",
      "max        1.000000    6.000000  \n"
     ]
    }
   ],
   "source": [
    "# 1. Descriptive Statistics\n",
    "desc_stats = data.describe()\n",
    "print(\"Descriptive Statistics:\")\n",
    "print(desc_stats)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8fa9d7e7-c8f6-4c31-887f-61928d82db45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 2. Correlation Analysis (Heatmap)\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Hanya pilih kolom yang bertipe numerik\n",
    "numeric_data = data.select_dtypes(include=['int64', 'float64'])\n",
    "\n",
    "# Mengisi nilai kosong (NaN) dengan nilai rata-rata kolom (opsional)\n",
    "numeric_data = numeric_data.fillna(numeric_data.mean())\n",
    "\n",
    "# Membuat heatmap korelasi\n",
    "plt.figure(figsize=(10,8))\n",
    "sns.heatmap(numeric_data.corr(), annot=True, cmap=\"YlGnBu\")\n",
    "plt.title(\"Correlation Heatmap\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "30cdb541-4f3f-4b09-a449-1ed6fefc34ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 3. Logistic Regression to Predict PE/Non PE\n",
    "# Select relevant features for prediction\n",
    "X = data[['USIA', 'PARITAS', 'JARAK KELAHIRAN', 'RIW HIPERTENSI', 'OBESITAS', 'RIW DM', 'RIW HIPERTENSI/PE DALAM KELUARGA', 'SOSEK RENDAH']]\n",
    "y = data['PE/Non PE']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "7246e6c1-3737-4cc5-87cf-bea95b7da9b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "982d7658-7099-4d7e-b0ca-33f220f99b4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 392 entries, 249 to 102\n",
      "Data columns (total 8 columns):\n",
      " #   Column                            Non-Null Count  Dtype  \n",
      "---  ------                            --------------  -----  \n",
      " 0   USIA                              392 non-null    int32  \n",
      " 1   PARITAS                           392 non-null    int64  \n",
      " 2   JARAK KELAHIRAN                   240 non-null    float64\n",
      " 3   RIW HIPERTENSI                    392 non-null    int32  \n",
      " 4   OBESITAS                          392 non-null    int32  \n",
      " 5   RIW DM                            392 non-null    int32  \n",
      " 6   RIW HIPERTENSI/PE DALAM KELUARGA  392 non-null    int32  \n",
      " 7   SOSEK RENDAH                      392 non-null    int32  \n",
      "dtypes: float64(1), int32(6), int64(1)\n",
      "memory usage: 18.4 KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# Periksa jika ada nilai yang bukan numerik atau NaN dalam X_train\n",
    "print(X_train.info())\n",
    "\n",
    "# Isi nilai NaN (jika ada) dengan nilai rata-rata kolom\n",
    "X_train = X_train.fillna(X_train.mean())\n",
    "X_test = X_test.fillna(X_test.mean())\n",
    "\n",
    "# Konversi semua data ke numerik (opsional jika perlu)\n",
    "X_train = X_train.apply(pd.to_numeric, errors='coerce')\n",
    "X_test = X_test.apply(pd.to_numeric, errors='coerce')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "39bf5cb3-7056-4ba0-9cf1-0ac59b4ff0ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Standarisasi fitur sebelum pelatihan model\n",
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "0d624f1d-2e9b-42dc-9e4d-2183f3ed175e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=200)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(max_iter=200)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(max_iter=200)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train the logistic regression model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "model = LogisticRegression(max_iter=200)\n",
    "model.fit(X_train, y_train)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "b60fbd4b-2b00-401d-aef8-ddc43b4806bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predict and evaluate the model\n",
    "y_pred = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7a54680e-5919-411d-9b38-f6a72b7bb5c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n",
      "C:\\Users\\user\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sklearn\\metrics\\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
      "  _warn_prf(average, modifier, f\"{metric.capitalize()} is\", len(result))\n"
     ]
    }
   ],
   "source": [
    "# Confusion Matrix and Classification Report\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "class_report = classification_report(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "bee834aa-8b43-4e91-b1db-1edd3220fa1d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix:\n",
      "[[152   0   0   1   0]\n",
      " [  9   0   0   1   0]\n",
      " [  0   0   0   1   0]\n",
      " [  3   0   0   1   0]\n",
      " [  1   0   0   0   0]]\n",
      "\n",
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           1       0.92      0.99      0.96       153\n",
      "           2       0.00      0.00      0.00        10\n",
      "           3       0.00      0.00      0.00         1\n",
      "           5       0.25      0.25      0.25         4\n",
      "           6       0.00      0.00      0.00         1\n",
      "\n",
      "    accuracy                           0.91       169\n",
      "   macro avg       0.23      0.25      0.24       169\n",
      "weighted avg       0.84      0.91      0.87       169\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\"Confusion Matrix:\")\n",
    "print(conf_matrix)\n",
    "print(\"\\nClassification Report:\")\n",
    "print(class_report)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "46599e02-6ae6-455f-bc9d-454d02acdef4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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DIfDYfj5+Tn/809JSTEkGdWqVTN+/PFH59i1a9cakox169Zd9fm3b99uSDIWLVpkZGRkGKdOnTI2bNhg1KlTx7DZbM6facF9rnQkJiYW90cOoJyx5haAKc6dOydJqlKlylXHFfRnZWW5jI2Li3MZN2rUKM2dO1cbN25U8+bNtXr1auXn56tv374u24bZ7XY1aNBA27dv11//+lcFBARIkrZs2aL77rtPlSpVuqHncnNzU0xMjF555RWdO3fOWfOyZct05513Kjw8/Irn2mw29enTR6+//rrOnz8vPz8/SdLKlSt166236q677pIk5+zq+vXr1aJFC+ca2eI6fPiwyzIQm82mbt26adGiRS7jfHx8tG7dukLnV69e3eXzxo0bFRERccUv1sXExOi5557T1KlT1bNnzyLX3m7cuFF2u139+/d3tnl6emr06NHq37+/du7cqe7duzv7+vXrp1tuucX5uWD2/9c7HlzNb5dwBAUFaenSpWrdurVL+/Dhw51LUH4tIiKiWPcBUP4ItwBMURD6CkLulVwpBDdo0MDlc7169eTm5ubcmuvIkSMyDKPQuAIFgTA8PFzx8fGaOXOmli1bpvbt2+v+++/XwIEDncH3eg0ePFgvvPCC1qxZo8GDBys5OVl79+7V/Pnzr3luv379NHv2bL333nsaMGCAzp8/r40bN+qxxx5zhsK7775bvXr10pQpUzRr1ix17NhRPXv21IABA4r1xbc6depowYIFzm29GjRooODg4ELj3N3dFRUVdc3rbdiwQT169Lhiv7u7uyZMmKDY2Fi9++67Re5+8d1336lBgwYuO1JIUpMmTZz9v1arVi2XzwVB96effrpmvZI0ceJEtW/fXu7u7qpevbqaNGkiD4/C/5PYoEGDYv0MAFQcrLkFYIqAgADVqFFD+/fvv+q4/fv369Zbb5W/v/9Vx/12NjA/P182m02bN2/W1q1bCx2vv/66c+w//vEP7d+/X3/961/1888/a/To0WratKm+//77Ej1bRESEWrVqpbfeekvSL19q8/LyUt++fa95btu2bVWnTh29/fbbkn5Zl/zzzz+rX79+Ls/6zjvvKDExUSNHjtR///tfPfLII2rVqpXOnz9/zXtUrlxZUVFR+uMf/6h27doVGWyLKyUlRYcPHy5yve2vxcTEqH79+tdce1tcRW1HJqnY127WrJmi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cW3atOmGnmPFihVq0KCBmjZtKnd3dz388MNauHChs//WW2/VK6+8ookTJ+qWW25R586dNW3aNB07duyG7gsAJUW4BYAyVNTMbFFiYmK0b98+ffXVV/r4449Vv359denSRefOnXMZt3LlSu3bt8/lKBAREaGvv/5aSUlJeuSRR5Senq4ePXroT3/6U4nrX7Rokcva34EDB2rVqlUudcXFxSk1NVXLli2Tw+HQqlWr1LRpU23durXE9wWAkiLcAkAZqF+/vmw2m7755psi+7/55hvdcsstCgoKkvTLmtf69eurfv36ateunRYuXKgjR45o5cqVLueFhYU5xxUcv+bm5qY2bdpozJgxWr16tZYsWaKFCxcqJSXlup/h0KFDSkpK0p///Gd5eHjIw8NDbdu21YULF7RixQqXsVWqVFGPHj00ffp0ffXVV2rfvr2ee+65674nANwowi0AlIFq1arpnnvu0dy5c/Xzzz+79BXMcvbr1082m63I893d3SWp0LnXKyIiQpKUnZ193ecuXLhQHTp00FdffeUyUxwfH++yNOG3bDabGjduXKJ7AsCNYrcEACgjr732mu68805FR0frueeeU3h4uA4ePKhx48bp1ltv1fTp051jL1y44NxDNi0tTdOmTZOPj4+6dOnics0ffvih0F6zVatWlY+Pj3r37q127drpzjvvlN1uV0pKihISEtSwYUM1btz4umrPzc3Vm2++qalTp+q2225z6fvTn/6kmTNn6uDBg8rNzdWkSZM0aNAgRUREyMvLSzt37tSiRYtcdlUAgPLCzC0AlJEGDRpoz549qlu3rvr27at69epp+PDh6tSpkxITExUYGOgcu2DBAtWoUUM1atRQp06ddObMGW3cuFGNGjVyuWZUVJRzXMHx7rvvSpKio6O1bt069ejRQw0bNlRsbKwaN26s999/Xx4e1zeX8d577+mHH37Qgw8+WKivSZMmatKkiRYuXKiaNWuqTp06mjJliiIjI3XHHXfo5Zdf1pQpU/TMM89c/w8NAG6QzSjutx0AAACACo6ZWwAAAFgG4RYAAACWQbgFAACAZRBuAQAAYBmEWwAAAFgG4RYAAACWQbgFAACAZRBuAQAAYBmEWwAAAFgG4RYAAACWQbgFAACAZfw/69SVAKeoGJAAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 4. Visualization: Bar chart of PE/Non PE based on certain attributes (e.g., Obesity)\n",
    "plt.figure(figsize=(8,6))\n",
    "sns.countplot(x='OBESITAS', hue='PE/Non PE', data=data)\n",
    "plt.title(\"Obesity vs PE/Non PE\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bc436eb-e7fc-47b1-aa5b-3cf847839425",
   "metadata": {},
   "source": [
    "## Kesimpulan dari percobaan yang bisa saya tarik"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5f993fa-9147-4a6b-80a6-6d5b0529db0c",
   "metadata": {},
   "source": [
    "### Korelasi Antar Atribut\n",
    "Dari heatmap korelasi, kita bisa melihat hubungan antara variabel. Sebagai contoh:\n",
    "- Obesitas mungkin memiliki korelasi dengan PE (Preeklampsia), dan faktor seperti riwayat hipertensi juga dapat menunjukkan hubungan signifikan dengan kondisi tersebut.\n",
    "- Korelasi positif antara faktor risiko seperti hipertensi dan PE menunjukkan bahwa orang dengan riwayat hipertensi atau keluarga dengan hipertensi cenderung lebih berisiko."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a37ed2b-69be-47f5-a129-ef4ce54581e7",
   "metadata": {},
   "source": [
    "### Model Prediksi (Logistic Regression)\n",
    "- Model regresi logistik yang dijalankan mencoba memprediksi risiko PE berdasarkan beberapa fitur, seperti usia, riwayat hipertensi, obesitas, dan status sosial-ekonomi.\n",
    "- Dari confusion matrix dan classification report, kita dapat mengevaluasi kinerja model. Misalnya, jika nilai akurasi cukup tinggi, model berhasil memprediksi dengan baik.\n",
    "- Namun, jika precision atau recall untuk salah satu kelas (misalnya PE) rendah, itu menunjukkan bahwa model mungkin perlu lebih banyak perbaikan atau bahwa fitur tambahan perlu ditambahkan."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5519c9b-ee73-4a43-8d2f-19fda328f139",
   "metadata": {},
   "source": [
    "### Visualisasi PE dan Obesitas :\n",
    "Bar chart PE/Non PE berdasarkan Obesitas:\n",
    "- Jika grafik menunjukkan bahwa proporsi PE lebih tinggi pada orang yang mengalami obesitas, maka obesitas dapat dianggap sebagai salah satu faktor risiko utama dalam kasus ini. Hal ini konsisten dengan literatur medis yang menunjukkan hubungan kuat antara obesitas dan risiko PE."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bf58b81-c3f0-47fa-8d8b-b07e6c7cc4f0",
   "metadata": {},
   "source": [
    "## Kesimpulan Utama"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1caff0e5-e126-419a-b27d-1b7c905e3d25",
   "metadata": {},
   "source": [
    "- Faktor Risiko PE: Berdasarkan data dan hasil yang diperoleh, beberapa faktor risiko penting untuk preeklampsia (PE) dalam dataset ini adalah usia, obesitas, riwayat hipertensi, dan riwayat penyakit dalam keluarga.\n",
    "- Visualisasi PE dan Obesitas: Hubungan antara obesitas dan PE terlihat signifikan, sehingga obesitas menjadi salah satu faktor risiko yang perlu diperhatikan dalam pencegahan preeklampsia."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
